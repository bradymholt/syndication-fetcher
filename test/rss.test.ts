import axios from "axios";
import { fetchFeed } from "../src/main";

jest.mock("axios");

describe("rss", () => {
  it("multiple entries", async () => {
    axios.get = jest.fn().mockResolvedValue({
      data: `\    
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
<channel>
	<title>Geeky Tidbits</title>
	<description>Tidbits on software development, technology, and other geeky stuff</description>
	<link>https://www.geekytidbits.com</link>
	<atom:link href="https://www.geekytidbits.com/rss.xml" rel="self" type="application/rss+xml"/>
	<lastBuildDate>Tue, 03 Jan 2023 22:38:08 +0000</lastBuildDate>
	<item>
		<title>Playing with SvelteKit and Cloudflare Pages</title>
		<description>
			<![CDATA[ <p>SvelteKit is a web framework I’ve been keeping my eye on. Sure, it builds upon Svelte, but there is a lot more to it. It uses <a href="https://vitejs.dev/config/">Vite</a> for build tooling, has a simple file-based routing system, and allows you to build “Transitional Web Apps”, as Rich Harris calls them in his <a href="https://www.youtube.com/watch?v=860d8usGC0o">Have Single-Page Apps Ruined the Web?</a> talk from Jamstack Conf 2021. I think at first glace it looks like a great framework for building web apps.</p><p>Since it just hit <a href="https://svelte.dev/blog/announcing-sveltekit-1.0">v1.0</a> I thought now would be a good time to play with it. I’ve also been learning more about Cloudflare Workers, Pages, KV, etc. and decided I would like to build a simple web app using SvelteKit and deploy it to Cloudflare Pages.</p><p>The result of my playing is simple app template that implements user authentication. You can register a new user, login with a new registration, initiate a Forgot Password flow including sending a reset email. You can see the GitHub repo here: <a href="https://github.com/bradymholt/sveltekit-auth-template">https://github.com/bradymholt/sveltekit-auth-template</a> and the live site here: <a href="https://sveltekit-auth-template.pages.dev/">https://sveltekit-auth-template.pages.dev/</a>.</p><p><img src="/playing-with-sveltekit-on-cloudflare-pages/template.png" alt="SvelteKit Auth Template"></p><p>Things I learned and worked with while building this template:</p><ul><li>How to create JWTs on Cloudflare Workers</li><li>How to use <a href="https://developers.cloudflare.com/workers/learning/how-kv-works/">KV</a>, Cloudflare’s key value store</li><li>Sending emails with <a href="https://blog.cloudflare.com/sending-email-from-workers-with-mailchannels/">MailChannels</a></li><li>Validation with <a href="https://github.com/colinhacks/zod">zod</a></li><li>TailwindCSS - although I initially used Tailwind I changed my mind and removed it. But, I took it for a spin and learned a bit about it.</li><li>Self-hosting web fonts</li><li>PostCSS - I haven’t done much with PostCSS before but I was able to play with it and in particular, use the “postcss-nested” plugin to get nested CSS working without having to use Sass or Less.</li></ul> ]]>
		</description>
		<pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate>
		<link>https://www.geekytidbits.com/playing-with-sveltekit-on-cloudflare-pages/</link>
		<guid isPermaLink="true">https://www.geekytidbits.com/playing-with-sveltekit-on-cloudflare-pages/</guid>
	</item>
	<item>
		<title>Daily WTF JavaScript</title>
		<description>
			<![CDATA[ <p>I have been itching to build something recently. In the not so distant past when I’ve had this desire I ended up building a project template as a way to learn some new things and create a scaffold for a project I might tackle in the future. But, this time I decided I want to build something that I could actually publish.</p><p>What I ended up building is silly and trivial but it was fun: <a href="https://dailywtfjs.geekytidbits.com/">Daily WTF JavaScript</a> - a site that displays a daily rotating snippet of JavaScript that makes you say “WTF!”. Yes, there are no shortage of examples.</p><p><img src="/daily-wtf-javascript/wtfjs.png" alt="Daily WTF JavaScript"></p><p>As always when building things, I learned plenty:</p><ul><li><a href="https://vitejs.dev/">Vite</a> - I used Vite as a build tool and wow was I impressed. This felt so much better than using webpack or one of its derivatives.</li><li><code>place-items: center;</code> for centering an HTML element horizontally and vertically</li><li>GitHub Actions with GitHub Pages - My <a href="https://github.com/bradymholt/daily-wtf-js/blob/main/.github/workflows/gh-pages.yml">workflow</a> to publish the site to GitHub Pages uses GitHub Actions, which is the new generation method for working with pages. I can now use this template as a baseline for other projects.</li><li>Although I’ve used <a href="https://github.com/jsdom/jsdom">jsdom</a> before, it’s been awhile and I was able to reintroduce myself to its usefulness to parse HTML on the server side.</li><li>I was exposed to the wonderful world of <a href="https://cssgradient.io/swatches/">CSS Gradient Swatches</a>.</li><li>I learned more about <a href="https://postcss.org/">PostCSS</a> and want to continue learning and using it further.</li></ul> ]]>
		</description>
		<pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate>
		<link>https://www.geekytidbits.com/daily-wtf-javascript/</link>
		<guid isPermaLink="true">https://www.geekytidbits.com/daily-wtf-javascript/</guid>
	</item>
</channel>
</rss>`,
    });

    const result = await fetchFeed("https://www.example.com/atom");
    expect(result).toEqual(
      expect.objectContaining({
        title: "Geeky Tidbits",
        items: expect.arrayContaining([
          expect.objectContaining({
            link: "https://www.geekytidbits.com/daily-wtf-javascript/",
          }),
        ]),
      })
    );
  });

  it("single entry", async () => {
    axios.get = jest.fn().mockResolvedValue({
      data: `\    
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
<channel>
	<title>Geeky Tidbits</title>
	<description>Tidbits on software development, technology, and other geeky stuff</description>
	<link>https://www.geekytidbits.com</link>
	<atom:link href="https://www.geekytidbits.com/rss.xml" rel="self" type="application/rss+xml"/>
	<lastBuildDate>Tue, 03 Jan 2023 22:38:08 +0000</lastBuildDate>
	<item>
		<title>Playing with SvelteKit and Cloudflare Pages</title>
		<description>
			<![CDATA[ <p>SvelteKit is a web framework I’ve been keeping my eye on. Sure, it builds upon Svelte, but there is a lot more to it. It uses <a href="https://vitejs.dev/config/">Vite</a> for build tooling, has a simple file-based routing system, and allows you to build “Transitional Web Apps”, as Rich Harris calls them in his <a href="https://www.youtube.com/watch?v=860d8usGC0o">Have Single-Page Apps Ruined the Web?</a> talk from Jamstack Conf 2021. I think at first glace it looks like a great framework for building web apps.</p><p>Since it just hit <a href="https://svelte.dev/blog/announcing-sveltekit-1.0">v1.0</a> I thought now would be a good time to play with it. I’ve also been learning more about Cloudflare Workers, Pages, KV, etc. and decided I would like to build a simple web app using SvelteKit and deploy it to Cloudflare Pages.</p><p>The result of my playing is simple app template that implements user authentication. You can register a new user, login with a new registration, initiate a Forgot Password flow including sending a reset email. You can see the GitHub repo here: <a href="https://github.com/bradymholt/sveltekit-auth-template">https://github.com/bradymholt/sveltekit-auth-template</a> and the live site here: <a href="https://sveltekit-auth-template.pages.dev/">https://sveltekit-auth-template.pages.dev/</a>.</p><p><img src="/playing-with-sveltekit-on-cloudflare-pages/template.png" alt="SvelteKit Auth Template"></p><p>Things I learned and worked with while building this template:</p><ul><li>How to create JWTs on Cloudflare Workers</li><li>How to use <a href="https://developers.cloudflare.com/workers/learning/how-kv-works/">KV</a>, Cloudflare’s key value store</li><li>Sending emails with <a href="https://blog.cloudflare.com/sending-email-from-workers-with-mailchannels/">MailChannels</a></li><li>Validation with <a href="https://github.com/colinhacks/zod">zod</a></li><li>TailwindCSS - although I initially used Tailwind I changed my mind and removed it. But, I took it for a spin and learned a bit about it.</li><li>Self-hosting web fonts</li><li>PostCSS - I haven’t done much with PostCSS before but I was able to play with it and in particular, use the “postcss-nested” plugin to get nested CSS working without having to use Sass or Less.</li></ul> ]]>
		</description>
		<pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate>
		<link>https://www.geekytidbits.com/playing-with-sveltekit-on-cloudflare-pages/</link>
		<guid isPermaLink="true">https://www.geekytidbits.com/playing-with-sveltekit-on-cloudflare-pages/</guid>
	</item>	
</channel>
</rss>`,
    });

    const result = await fetchFeed("https://www.example.com/atom");
    expect(result).toEqual(
      expect.objectContaining({
        title: "Geeky Tidbits",
        items: expect.arrayContaining([
          expect.objectContaining({
            link: "https://www.geekytidbits.com/playing-with-sveltekit-on-cloudflare-pages/",
          }),
        ]),
      })
    );
  });

	it("complicated single entry", async () => {
		axios.get = jest.fn().mockResolvedValue({
      data: `\    
			<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:admin="http://webns.net/mvcb/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
			<channel>
			<title>
			<![CDATA[ A List Apart: The Full Feed ]]>
			</title>
			<link> https://alistapart.com </link>
			<description>Articles for people who make web sites.</description>
			<dc:language> en-US </dc:language>
			<dc:creator>The fine folks at A List Apart</dc:creator>
			<dc:rights>Copyright 2023</dc:rights>
			<dc:date> 2023-01-31T21:55:22+00:00 </dc:date>
			<item>
			<title>
			<![CDATA[ Personalization Pyramid: A Framework for Designing with User Data ]]>
			</title>
			<author>
			by
			<a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/colineagan/">Colin Eagan</a>
			,
			<a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/jeffmacintyre/">Jeffrey MacIntyre</a>
			</author>
			<link> https://alistapart.com/article/personalization-pyramid/ </link>
			<guid> https://alistapart.com/article/personalization-pyramid/ </guid>
			<description>
			<![CDATA[ <!-- wp:paragraph --> <p>As a UX professional in today’s data-driven landscape, it’s increasingly likely that you’ve been asked to design a personalized digital experience, whether it’s a public website, user portal, or native application. Yet while there continues to be no shortage of marketing hype around personalization platforms, we still have very few standardized approaches for implementing personalized UX.</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>That’s where we come in. After completing dozens of personalization projects over the past few years, we gave ourselves a goal: could you create a holistic personalization framework specifically for UX practitioners? The <strong>Personalization Pyramid</strong> is a designer-centric model for standing up human-centered personalization programs, spanning data, segmentation, content delivery, and overall goals. By using this approach, you will be able to understand the core components of a contemporary, UX-driven personalization program (or at the very least know enough to get started). </p> <!-- /wp:paragraph --> <!-- wp:image {"id":7173666,"sizeSlug":"large"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image20-1024x595.png" alt="A chart answering the question Do you have the resources you need to run personalization in your organization? Globally, 13% don’t 33% have limited access, 39% have it (on demand), and 15% have it dedicated." class="wp-image-7173666"/><figcaption class="wp-element-caption"><p><strong>Growing tools for personalization:</strong> According to a Dynamic Yield survey, 39% of respondents felt support is available on-demand when a business case is made for it (up 15% from 2020).</p><p><small>Source: “The State of Personalization Maturity – Q4 2021” Dynamic Yield conducted its annual maturity survey across roles and sectors in the Americas (AMER), Europe and the Middle East (EMEA), and the Asia-Pacific (APAC) regions. This marks the fourth consecutive year publishing our research, which includes more than 450 responses from individuals in the C-Suite, Marketing, Merchandising, CX, Product, and IT.</small></p></figcaption></figure> <!-- /wp:image --> <!-- wp:heading --> <h2><strong>Getting Started</strong></h2> <!-- /wp:heading --> <!-- wp:paragraph --> <p>For the sake of this article, we’ll assume you’re already familiar with the basics of digital personalization. A good overview can be found here: <a href="https://www.uxbooth.com/articles/website-personalization-planning/">Website Personalization Planning</a>. While UX projects in this area can take on many different forms, they often stem from similar starting points.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p><strong>Common scenarios for starting a personalization project:</strong></p> <!-- /wp:paragraph --> <!-- wp:list --> <ul><!-- wp:list-item --> <li>Your organization or client purchased a content management system (CMS) or marketing automation platform (MAP) or related technology that supports personalization</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>The CMO, CDO, or CIO has identified personalization as a goal</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Customer data is disjointed or ambiguous</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>You are running some isolated targeting campaigns or A/B testing</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Stakeholders disagree on personalization approach</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Mandate of customer privacy rules (e.g. GDPR) requires revisiting existing user targeting practices</li> <!-- /wp:list-item --></ul> <!-- /wp:list --> <!-- wp:image {"id":7173667,"width":768,"height":576,"sizeSlug":"full","linkDestination":"none"} --> <figure class="wp-block-image size-full is-resized"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image22.png" alt="Two men and a woman discussing personalization using a card deck. They are seated at a round table in a hotel conference room. The workshop leaders, two women, are at a podium in the background." class="wp-image-7173667" width="768" height="576"/><figcaption class="wp-element-caption">Workshopping personalization at a conference.</figcaption></figure> <!-- /wp:image --> <!-- wp:paragraph --> <p>Regardless of where you begin, a successful personalization program will require the same core building blocks. We’ve captured these as the “levels” on the pyramid. Whether you are a UX designer, researcher, or strategist, understanding the core components can help make your contribution successful.&nbsp;&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:image {"id":7173665,"width":488,"height":512,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large is-resized"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image14-975x1024.png" alt="The Personalization Pyramid visualized. The pyramid is stacks labeled, from the bottom, raw data (1m+), actionable data (100k+), user segments (1k+), contexts &amp; campaigns (100s), touchpoints (dozens), goals (handful). The North Star (one) is above. An arrow for prescriptive, business driven data goes up the left side and an arrow for adaptive user-driven data goes down the right side." class="wp-image-7173665" width="488" height="512"/><figcaption class="wp-element-caption">From the ground up: Soup-to-nuts personalization, without going nuts.</figcaption></figure> <!-- /wp:image --> <!-- wp:paragraph --> <p>From top to bottom, the levels include:</p> <!-- /wp:paragraph --> <!-- wp:list {"ordered":true} --> <ol><!-- wp:list-item --> <li><strong>North Star: </strong>What larger strategic objective is driving the personalization program?&nbsp;</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li><strong>Goals:</strong> What are the specific, measurable outcomes of the program?&nbsp;</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li><strong>Touchpoints: </strong>Where will the personalized experience be served?</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li><strong>Contexts and Campaigns: </strong>What personalization content will the user see?</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li><strong>User Segments:</strong> What constitutes a unique, usable audience?&nbsp;</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li><strong>Actionable Data: </strong>What reliable and authoritative data is captured by our technical platform to drive personalization?&nbsp;&nbsp;</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li><strong>Raw Data: </strong>What wider set of data is conceivably available (already in our setting) allowing you to personalize?</li> <!-- /wp:list-item --></ol> <!-- /wp:list --> <!-- wp:paragraph --> <p>We’ll go through each of these levels in turn. To help make this actionable, we created an accompanying <strong>deck of cards</strong> to illustrate specific examples from each level. We’ve found them helpful in personalization brainstorming sessions, and will include examples for you here.</p> <!-- /wp:paragraph --> <!-- wp:image {"id":7173668,"sizeSlug":"full","linkDestination":"none"} --> <figure class="wp-block-image size-full"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image2.png" alt="A deck of personalization brainstorming cards (the size of playing cards) against a black background." class="wp-image-7173668"/><figcaption class="wp-element-caption"><strong>Personalization pack:</strong> Deck of cards to help kickstart your personalization brainstorming.</figcaption></figure> <!-- /wp:image --> <!-- wp:heading --> <h2><strong>Starting at the Top</strong></h2> <!-- /wp:heading --> <!-- wp:paragraph --> <p>The components of the pyramid are as follows:</p> <!-- /wp:paragraph --> <!-- wp:heading {"level":3} --> <h3>North Star</h3> <!-- /wp:heading --> <!-- wp:paragraph --> <p>A north star is what you are aiming for overall with your personalization program (big or small). The North Star defines the (one) overall mission of the personalization program. What do you wish to accomplish? North Stars cast a shadow. The bigger the star, the bigger the shadow. Example of North Starts might include:&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:list {"ordered":true} --> <ol><!-- wp:list-item --> <li><strong>Function:</strong> Personalize based on basic user inputs. Examples: “Raw” notifications, basic search results, system user settings and configuration options, general customization, basic optimizations</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li><strong>Feature:</strong> Self-contained personalization componentry. Examples: “Cooked” notifications, advanced optimizations (geolocation), basic dynamic messaging, customized modules, automations, recommenders</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li><strong>Experience:</strong> Personalized user experiences across multiple interactions and user flows. Examples: Email campaigns, landing pages, advanced messaging (i.e. C2C chat) or conversational interfaces, larger user flows and content-intensive optimizations (localization).</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li><strong>Product:</strong> Highly differentiating personalized product experiences. Examples: Standalone, branded experiences with personalization at their core, like the “algotorial” playlists by Spotify such as Discover Weekly.</li> <!-- /wp:list-item --></ol> <!-- /wp:list --> <!-- wp:gallery {"linkTo":"none"} --> <figure class="wp-block-gallery has-nested-images columns-default is-cropped"><!-- wp:image {"id":7173669,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image7-656x1024.jpg" alt="Function: React to basic user inputs" class="wp-image-7173669"/></figure> <!-- /wp:image --> <!-- wp:image {"id":7173670,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image18-656x1024.jpg" alt="Feature: personalized modules" class="wp-image-7173670"/></figure> <!-- /wp:image --> <!-- wp:image {"id":7173671,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image8-656x1024.jpg" alt="Experience: Integrated personalization" class="wp-image-7173671"/></figure> <!-- /wp:image --><figcaption class="blocks-gallery-caption wp-element-caption"><strong>North star cards. </strong>These can help orient your team towards a common goal that personalization will help achieve; Also, these are useful for characterizing the end-state ambition of the presently stated personalization effort.</figcaption></figure> <!-- /wp:gallery --> <!-- wp:heading {"level":3} --> <h3>Goals</h3> <!-- /wp:heading --> <!-- wp:paragraph --> <p>As in any good UX design, personalization can help accelerate <a href="https://www.uxbooth.com/articles/designing-for-customer-intentions-part-1/">designing with customer intentions</a><strong>. Goals</strong> are the tactical and measurable metrics that will prove the overall program is successful. A good place to start is with your current analytics and measurement program and metrics you can benchmark against. In some cases, new goals may be appropriate. The key thing to remember is that <em>personalization itself is not a goal</em>, rather it is a means to an end. Common goals include:</p> <!-- /wp:paragraph --> <!-- wp:list --> <ul><!-- wp:list-item --> <li>Conversion</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Time on task</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Net promoter score (NPS)</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Customer satisfaction&nbsp;</li> <!-- /wp:list-item --></ul> <!-- /wp:list --> <!-- wp:gallery {"linkTo":"none"} --> <figure class="wp-block-gallery has-nested-images columns-default is-cropped"><!-- wp:image {"id":7173674,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image12-656x1024.jpg" alt="NPS: Net Promoter Score" class="wp-image-7173674"/></figure> <!-- /wp:image --> <!-- wp:image {"id":7173672,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image23-656x1024.jpg" alt="Time on Task: Users move quicker" class="wp-image-7173672"/></figure> <!-- /wp:image --> <!-- wp:image {"id":7173673,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image13-656x1024.jpg" alt="Conversion: Move more of the thing" class="wp-image-7173673"/></figure> <!-- /wp:image --><figcaption class="blocks-gallery-caption wp-element-caption"><strong>Goal cards.</strong> Examples of some common KPIs related to personalization that are concrete and measurable.</figcaption></figure> <!-- /wp:gallery --> <!-- wp:heading {"level":3} --> <h3>Touchpoints</h3> <!-- /wp:heading --> <!-- wp:paragraph --> <p>Touchpoints are where the personalization happens. As a UX designer, this will be one of your largest areas of responsibility. The touchpoints available to you will depend on how your personalization and associated technology capabilities are instrumented, and should be rooted in improving a user’s experience at a particular point in the journey. Touchpoints can be multi-device (mobile, in-store, website) but also more granular (web banner, web pop-up etc.). Here are some examples:</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p><strong>Channel-level </strong>Touchpoints</p> <!-- /wp:paragraph --> <!-- wp:list --> <ul><!-- wp:list-item --> <li>Email: Role</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Email: Time of open</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>In-store display (JSON endpoint)</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Native app</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Search</li> <!-- /wp:list-item --></ul> <!-- /wp:list --> <!-- wp:paragraph --> <p><strong>Wireframe-level </strong>Touchpoints</p> <!-- /wp:paragraph --> <!-- wp:list --> <ul><!-- wp:list-item --> <li>Web overlay</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Web alert bar</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Web banner</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Web content block</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Web menu</li> <!-- /wp:list-item --></ul> <!-- /wp:list --> <!-- wp:gallery {"linkTo":"none"} --> <figure class="wp-block-gallery has-nested-images columns-default is-cropped"><!-- wp:image {"id":7173677,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image25-656x1024.jpg" alt="In-store Display: End-cap interfaces" class="wp-image-7173677"/></figure> <!-- /wp:image --> <!-- wp:image {"id":7173675,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image11-656x1024.jpg" alt="Email: Time, personalize at time of open" class="wp-image-7173675"/></figure> <!-- /wp:image --> <!-- wp:image {"id":7173676,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image19-656x1024.jpg" alt="Content Block: Into the woodwork" class="wp-image-7173676"/></figure> <!-- /wp:image --><figcaption class="blocks-gallery-caption wp-element-caption"><strong>Touchpoint cards. </strong>Examples of common personalization touchpoints: these can vary from narrow (e.g., email) to broad (e.g., in-store).</figcaption></figure> <!-- /wp:gallery --> <!-- wp:paragraph --> <p>If you’re designing for web interfaces, for example, you will likely need to include personalized “zones” in your wireframes. The content for these can be presented programmatically in touchpoints based on our next step, contexts and campaigns.</p> <!-- /wp:paragraph --> <!-- wp:gallery {"linkTo":"none"} --> <figure class="wp-block-gallery has-nested-images columns-default is-cropped"><!-- wp:image {"id":7173678,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image21.png" alt="" class="wp-image-7173678"/></figure> <!-- /wp:image --> <!-- wp:image {"id":7173679,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image17.png" alt="" class="wp-image-7173679"/></figure> <!-- /wp:image --><figcaption class="blocks-gallery-caption wp-element-caption"><strong>Targeted Zones:</strong> Examples from Kibo of personalized “zones” on page-level wireframes occurring at various stages of a user journey (Engagement phase at left and Purchase phase at right.)<br><br>Source: “Essential Guide to End-to-End Personaliztion” by Kibo.</figcaption></figure> <!-- /wp:gallery --> <!-- wp:heading {"level":3} --> <h3>Contexts and Campaigns</h3> <!-- /wp:heading --> <!-- wp:paragraph --> <p>Once you’ve outlined some touchpoints, you can consider the actual personalized content a user will receive. Many personalization tools will refer to these as “campaigns” (so, for example, a campaign on a web banner for new visitors to the website). These will programmatically be shown at certain touchpoints to certain user segments, as defined by user data. At this stage, we find it helpful to consider two separate models: a <strong>context model</strong> and a <strong>content model</strong>. The context helps you consider the level of engagement of the user at the personalization moment, for example a user casually browsing information vs. doing a deep-dive. Think of it in terms of information retrieval behaviors. The content model can then help you determine what type of personalization to serve based on the context (for example, an “Enrich” campaign that shows related articles may be a suitable supplement to extant content).</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>Personalization <strong>Context</strong> Model:</p> <!-- /wp:paragraph --> <!-- wp:list {"ordered":true} --> <ol><!-- wp:list-item --> <li>Browse</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Skim</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Nudge</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Feast</li> <!-- /wp:list-item --></ol> <!-- /wp:list --> <!-- wp:paragraph --> <p>Personalization <strong>Content</strong> Model:</p> <!-- /wp:paragraph --> <!-- wp:list {"ordered":true} --> <ol><!-- wp:list-item --> <li>Alert</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Make Easier</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Cross-Sell</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Enrich</li> <!-- /wp:list-item --></ol> <!-- /wp:list --> <!-- wp:paragraph --> <p>We’ve written extensively about each of these models elsewhere, so if you’d like to read more you can check out Colin’s <a href="https://alistapart.com/article/emerging-ux-role-in-personalization/">Personalization Content Model</a> and Jeff’s <a href="https://bucket.circle.so/c/field-notes/progressive-personalization-a-decisionmaking-model-for-better-outcomes-in-personalized-ux">Personalization Context Model</a>. </p> <!-- /wp:paragraph --> <!-- wp:gallery {"linkTo":"none"} --> <figure class="wp-block-gallery has-nested-images columns-default is-cropped"><!-- wp:image {"id":7173681,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image28-656x1024.jpg" alt="Cross Sell: You may also like…" class="wp-image-7173681"/></figure> <!-- /wp:image --> <!-- wp:image {"id":7173682,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image3-656x1024.jpg" alt="Enrich: You might find this interesting" class="wp-image-7173682"/></figure> <!-- /wp:image --> <!-- wp:image {"id":7173680,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image27-656x1024.jpg" alt="Browse: Lean back, shallow engagement" class="wp-image-7173680"/></figure> <!-- /wp:image --><figcaption class="blocks-gallery-caption wp-element-caption"><strong>Campaign and Context cards:</strong> This level of the pyramid can help your team focus around the types of personalization to deliver end users and the use-cases in which they will experience it.</figcaption></figure> <!-- /wp:gallery --> <!-- wp:heading {"level":3} --> <h3>User Segments</h3> <!-- /wp:heading --> <!-- wp:paragraph --> <p>User segments can be created prescriptively or adaptively, based on user research (e.g. via rules and logic tied to set user behaviors or via A/B testing). At a minimum you will likely need to consider how to treat the <em>unknown</em> or first-time visitor, the <em>guest</em> or returning visitor for whom you may have a stateful cookie (or equivalent post-cookie identifier), or the <em>authenticated</em> visitor who is logged in. Here are some examples from the personalization pyramid:</p> <!-- /wp:paragraph --> <!-- wp:list --> <ul><!-- wp:list-item --> <li>Unknown</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Guest</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Authenticated</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Default</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Referred</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Role</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Cohort</li> <!-- /wp:list-item --> <!-- wp:list-item --> <li>Unique ID</li> <!-- /wp:list-item --></ul> <!-- /wp:list --> <!-- wp:gallery {"linkTo":"none"} --> <figure class="wp-block-gallery has-nested-images columns-default is-cropped"><!-- wp:image {"id":7173685,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image16-656x1024.jpg" alt="Authenticated: Logged in with token" class="wp-image-7173685"/></figure> <!-- /wp:image --> <!-- wp:image {"id":7173683,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image10-656x1024.jpg" alt="Unknown: Could be anyone really" class="wp-image-7173683"/></figure> <!-- /wp:image --> <!-- wp:image {"id":7173684,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image9-656x1024.jpg" alt="Guest: Dropped a cookie" class="wp-image-7173684"/></figure> <!-- /wp:image --><figcaption class="blocks-gallery-caption wp-element-caption"><strong>Segment cards.</strong> Examples of common personalization segments: at a minimum, you will need to consider the anonymous, guest, and logged in user types. Segmentation can get dramatically more complex from there.</figcaption></figure> <!-- /wp:gallery --> <!-- wp:heading {"level":3} --> <h3>Actionable Data</h3> <!-- /wp:heading --> <!-- wp:paragraph --> <p>Every organization with any digital presence has data. It’s a matter of asking what data you can ethically collect on users, its inherent reliability and value, as to how can you use it (sometimes known as “data activation.”) Fortunately, the tide is turning to first-party data: a recent study by Twilio estimates some <strong>80% of businesses are using at least some type of first-party data</strong> to personalize the customer experience. </p> <!-- /wp:paragraph --> <!-- wp:image {"id":7173686,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image6-1024x714.png" alt="Chart that answers the question &quot;Why is your company focusing on using first-party data for personalization?&quot; The top answer (at 53%) is &quot;it’s higher quality.&quot; That is followed by &quot;It’s easier to manage&quot; (46%), &quot;it provides better privacy&quot; (45%), &quot;it’s easier to obtain&quot; (42%), &quot;it’s more cost-effective&quot; (40%), &quot;it’s more ethical&quot; (37%), &quot;our customers want us to&quot; (36%), &quot;it’s the industry norm&quot; (27%), &quot;it’s easier to comply with regulations&quot; (27%), and &quot;we are phasing out 3rd party cookies&quot; (21%)." class="wp-image-7173686"/><figcaption class="wp-element-caption"><small>Source: “The State of Personalization 2021” by Twilio. Survey respondents were n=2,700 adult consumers who have purchased something online in the past 6 months, and n=300 adult manager+ decision-makers at consumer-facing companies that provide goods and/or services online. Respondents were from the United States, United Kingdom, Australia, and New Zealand.Data was collected from April 8 to April 20, 2021.</small></figcaption></figure> <!-- /wp:image --> <!-- wp:paragraph --> <p>First-party data represents multiple advantages on the UX front, including being relatively simple to collect, more likely to be accurate, and less susceptible to the “creep factor” of third-party data. So a key part of your UX strategy should be to determine what the best form of data collection is on your audiences. Here are some examples:</p> <!-- /wp:paragraph --> <!-- wp:gallery {"linkTo":"none"} --> <figure class="wp-block-gallery has-nested-images columns-default is-cropped"><!-- wp:image {"id":7173691,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image15-656x1024.jpg" alt="Quizes: Tell us what you like" class="wp-image-7173691"/></figure> <!-- /wp:image --> <!-- wp:image {"id":7173689,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image5-656x1024.jpg" alt="Behavioral profiling: Males 40+ who wear fedoras" class="wp-image-7173689"/></figure> <!-- /wp:image --> <!-- wp:image {"id":7173688,"sizeSlug":"large","linkDestination":"none"} --> <figure class="wp-block-image size-large"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image1-656x1024.jpg" alt="Campaign Source: Your discount code 29780…" class="wp-image-7173688"/></figure> <!-- /wp:image --></figure> <!-- /wp:gallery --> <!-- wp:image {"id":7173692,"sizeSlug":"full","linkDestination":"none"} --> <figure class="wp-block-image size-full"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image4.png" alt="Chart showing the impact of personalization across different phases of personalization maturity. It shows that effort is high in the early phases, but drops off quickly starting in phase 3 (machine learning) while at the same time conversion rates, AOV, and ROI increase from a relatively low level to off the chart." class="wp-image-7173692"/><figcaption class="wp-element-caption"><strong>Figure 1.1.2:</strong> Example of a personalization maturity curve, showing progression from basic recommendations functionality to true individualization. Credit: https://kibocommerce.com/blog/kibos-personalization-maturity-chart/</figcaption></figure> <!-- /wp:image --> <!-- wp:paragraph --> <p>There is a progression of profiling when it comes to recognizing and making decisioning about different audiences and their signals. It tends to move towards more granular constructs about smaller and smaller cohorts of users as time and confidence and data volume grow.</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>While some combination of <strong>implicit / explicit</strong> <strong>data</strong> is generally a prerequisite for any implementation (more commonly referred to as first party and third-party data) <strong>ML efforts</strong> are typically not cost-effective directly out of the box. This is because a strong data backbone and content repository is a prerequisite for optimization. But these approaches should be considered as part of the larger roadmap and may indeed help accelerate the organization’s overall progress. Typically at this point you will partner with key stakeholders and product owners to design a <strong>profiling model</strong>. The profiling model includes defining approach to configuring profiles, profile keys, profile cards and pattern cards. A multi-faceted approach to profiling which makes it scalable.</p> <!-- /wp:paragraph --> <!-- wp:heading --> <h2>Pulling it Together</h2> <!-- /wp:heading --> <!-- wp:paragraph --> <p>While the cards comprise the starting point to an inventory of sorts (we provide blanks for you to tailor your own), a set of potential levers and motivations for the style of personalization activities you aspire to deliver, they are more valuable when thought of in a grouping.&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>In assembling a card “hand”, one can begin to trace the entire trajectory from leadership focus down through a strategic and tactical execution. It is also at the heart of the way both co-authors have conducted workshops in assembling a program backlog—which is a fine subject for another article.</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>In the meantime, what is important to note is that each colored class of card is helpful to survey in understanding the range of choices potentially at your disposal, it is threading through and making concrete decisions about for whom this decisioning will be made: where, when, and how.</p> <!-- /wp:paragraph --> <!-- wp:image {"id":7173693,"sizeSlug":"full","linkDestination":"none"} --> <figure class="wp-block-image size-full"><img src="https://149572954.v2.pressablecdn.com/wp-content/uploads/2022/12/image26.jpg" alt="Cards on a table. At the top: Function is the north star &amp; customer satisfaction is the goal. User segment is unknown, the actionable data is a quiz, context is a nudge, campaign is to make something easier, and the touchpoint is a banner." class="wp-image-7173693"/><figcaption class="wp-element-caption"><strong>Scenario A:</strong> We want to use personalization to improve customer satisfaction on the website. For unknown users, we will create a short quiz to better identify what the user has come to do. This is sometimes referred to as “badging” a user in onboarding contexts, to better characterize their present intent and context.</figcaption></figure> <!-- /wp:image --> <!-- wp:heading --> <h2>Lay Down Your Cards</h2> <!-- /wp:heading --> <!-- wp:paragraph --> <p>Any sustainable personalization strategy must consider near, mid and long-term goals. Even with the leading CMS platforms like Sitecore and Adobe or the most exciting composable CMS DXP out there, there is simply no “easy button” wherein a personalization program can be stood up and immediately view meaningful results. That said, there is a common grammar to all personalization activities, just like every sentence has nouns and verbs. These cards attempt to map that territory.</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p></p> <!-- /wp:paragraph --> ]]>
			</description>
			<dc:subject>
			<![CDATA[ Content, Interaction Design ]]>
			</dc:subject>
			<dc:date> 2022-12-08T15:00:00+00:00 </dc:date>
			</item>
			<item>
			<title>
			<![CDATA[ Mobile-First CSS: Is It Time for a Rethink? ]]>
			</title>
			<author>
			by
			<a itemprop="url" class="author" rel="author" href="https://alistapart.com/author/patrick-clancey/">Patrick Clancey</a>
			</author>
			<link> https://alistapart.com/article/mobile-first-css-is-it-time-for-a-rethink/ </link>
			<guid> https://alistapart.com/article/mobile-first-css-is-it-time-for-a-rethink/ </guid>
			<description>
			<![CDATA[ <!-- wp:paragraph {"className":"intro"} --> <p class="intro">The mobile-first design methodology is great—it focuses on what really matters to the user, it’s well-practiced, and it’s been a common design pattern for years. So developing your CSS mobile-first should also be great, too…right?&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>Well, not necessarily. Classic mobile-first CSS development is based on the principle of overwriting style declarations: you begin your CSS with default style declarations, and overwrite and/or add new styles as you add breakpoints with <code>min-width</code> media queries for larger viewports (for a good overview see “<a href="https://www.mightyminnow.com/2013/11/what-is-mobile-first-css-and-why-does-it-rock/">What is Mobile First CSS and Why Does It Rock?</a>”). But all those exceptions create complexity and inefficiency, which in turn can lead to an increased testing effort and a code base that’s harder to maintain. Admit it—how many of us willingly want that?</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>On your own projects, mobile-first CSS may yet be the best tool for the job, but first you need to evaluate just how appropriate it is in light of the visual design and user interactions you’re working on. To help you get started, here’s how I go about tackling the factors you need to watch for, and I’ll discuss some alternate solutions if mobile-first doesn’t seem to suit your project.</p> <!-- /wp:paragraph --> <!-- wp:heading --> <h2>Advantages of mobile-first</h2> <!-- /wp:heading --> <!-- wp:paragraph --> <p>Some of the things to like with mobile-first CSS development—and why it’s been the de facto development methodology for so long—make a lot of sense:</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p><strong>Development hierarchy. </strong>One thing you undoubtedly get from mobile-first is a nice development hierarchy—you just focus on the mobile view and get developing.&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p><strong>Tried and tested. </strong>It’s a tried and tested methodology that’s worked for years for a reason: it solves a problem really well.</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p><strong>Prioritizes the mobile view</strong>. The mobile view is the<strong> </strong>simplest<strong> </strong>and arguably the most important, as it <strong>encompasses all the key user journeys</strong>, and often accounts for a <strong>higher proportion of user visits</strong> (depending on the project).&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p><strong>Prevents desktop-centric development. </strong>As development is done using desktop computers, it can be tempting to initially focus on the desktop view. But thinking about mobile from the start prevents us from getting stuck later on; no one wants to spend their time retrofitting a desktop-centric site to work on mobile devices!</p> <!-- /wp:paragraph --> <!-- wp:heading --> <h2>Disadvantages of mobile-first</h2> <!-- /wp:heading --> <!-- wp:paragraph --> <p>Setting style declarations and then overwriting them at higher breakpoints can lead to undesirable ramifications:</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p><strong>More complexity. </strong>The farther up the breakpoint hierarchy you go, the more unnecessary code you inherit from lower breakpoints.&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p><strong>Higher CSS specificity. </strong>Styles that have been reverted to their browser default value in a class name declaration now have a higher specificity. This can be a headache on large projects when you want to keep the CSS selectors as simple as possible.</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p><strong>Requires more regression testing. </strong>Changes to the CSS at a lower view (like adding a new style) requires all higher breakpoints to be regression tested.</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p><strong>The browser can’t prioritize CSS downloads. </strong>At wider breakpoints, classic mobile-first <code>min-width</code> media queries don’t leverage the browser’s capability to download CSS files in priority order.</p> <!-- /wp:paragraph --> <!-- wp:heading --> <h2>The problem of property value overrides</h2> <!-- /wp:heading --> <!-- wp:paragraph --> <p>There is nothing inherently wrong with overwriting values; CSS was designed to do just that. Still, inheriting incorrect values is unhelpful and can be burdensome and inefficient. It can also lead to increased style specificity when you have to overwrite styles to reset them back to their defaults, something that may cause issues later on, especially if you are using a combination of bespoke CSS and utility classes. We won’t be able to use a utility class for a style that has been reset with a higher specificity.</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>With this in mind, I’m developing CSS with a focus on the default values much more these days. Since there’s no specific order, and no chains of specific values to keep track of, this frees me to develop breakpoints <em>simultaneously</em>. I concentrate on finding common styles and isolating the specific exceptions in closed media query ranges (that is, any range with a <code>max-width</code> set).&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>This approach opens up some opportunities, as you can look at each breakpoint as a clean slate. If a component’s layout looks like it should be based on Flexbox at all breakpoints, it’s fine and can be coded in the default style sheet. But if it looks like Grid would be much better for large screens and Flexbox for mobile, these can both be done entirely independently when the CSS is put into closed media query ranges. Also, developing simultaneously requires you to have a good understanding of any given component in all breakpoints up front. This can help surface issues in the design earlier in the development process. We don’t want to get stuck down a rabbit hole building a complex component for mobile, and then get the designs for desktop and find they are equally complex and incompatible with the HTML we created for the mobile view!&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>Though this approach isn’t going to suit everyone, I encourage you to give it a try. There are plenty of tools out there to help with concurrent development, such as <a href="https://responsively.app/">Responsively App</a>, <a href="https://blisk.io/">Blisk</a>, and many others.&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>Having said that, I don’t feel the order itself is particularly relevant. If you are comfortable with focusing on the mobile view, have a good understanding of the requirements for other breakpoints, and prefer to work on one device at a time, then by all means stick with the classic development order. The important thing is to identify common styles and exceptions so you can put them in the relevant stylesheet—a sort of manual tree-shaking process! Personally, I find this a little easier when working on a component across breakpoints, but that’s by no means a requirement.</p> <!-- /wp:paragraph --> <!-- wp:heading --> <h2>Closed media query ranges in practice&nbsp;</h2> <!-- /wp:heading --> <!-- wp:paragraph --> <p>In classic mobile-first CSS we overwrite the styles, but we can avoid this by using media query ranges. To illustrate the difference (I’m using SCSS for brevity), let’s assume there are three visual designs:&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:list --> <ul><li>smaller than 768</li><li>from 768 to below 1024</li><li>1024 and anything larger&nbsp;</li></ul> <!-- /wp:list --> <!-- wp:paragraph --> <p>Take a simple example where a block-level element has a default <code>padding</code> of “20px,” which is overwritten at tablet to be “40px” and set back to “20px” on desktop.</p> <!-- /wp:paragraph --> <!-- wp:html --> <figure class="wp-block-table"> <table><tbody> <tr> <td valign="top"><p>Classic <code>min-width</code> mobile-first</p> <pre><code class="language-css">.my-block { padding: 20px; @media (min-width: 768px) { padding: 40px; } @media (min-width: 1024px) { padding: 20px; } }</code></pre></td> <td valign="top"><p>Closed media query range</p> <pre><code class="language-css">.my-block { padding: 20px; @media (min-width: 768px) and (max-width: 1023.98px) { padding: 40px; } }</code></td> </tr> </tbody></table> </figure> <!-- /wp:html --> <!-- wp:paragraph --> <p>The subtle difference is that the mobile-first example sets the default <code>padding</code> to “20px” and then overwrites it at each breakpoint, setting it three times in total. In contrast, the second example sets the default <code>padding</code> to “20px” and only overrides it at the relevant breakpoint where it isn’t the default value (in this instance, tablet is the exception).</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>The goal is to:&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:list --> <ul><li>Only set styles when needed.&nbsp;</li><li>Not set them with the <em>expectation</em> of overwriting them later on, again and again.&nbsp;</li></ul> <!-- /wp:list --> <!-- wp:paragraph --> <p>To this end, closed media query ranges are our best friend. If we need to make a change to any given view, we make it in the CSS media query range that applies to the specific breakpoint. We’ll be much less likely to introduce unwanted alterations, and our regression testing only needs to focus on the breakpoint we have actually edited.&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>Taking the above example, if we find that <code>.my-block</code> spacing on desktop is already accounted for by the margin at that breakpoint, and since we want to remove the padding altogether, we could do this by setting the mobile <code>padding</code> in a closed media query range.<br></p> <!-- /wp:paragraph --> <!-- wp:html --> <figure class="wp-block-table"> <pre><code class="language-css">.my-block { &nbsp; @media (max-width: 767.98px) { &nbsp;&nbsp;&nbsp;&nbsp;padding: 20px; &nbsp;&nbsp;} &nbsp; @media (min-width: 768px) and (max-width: 1023.98px) { &nbsp;&nbsp;&nbsp;&nbsp;padding: 40px; &nbsp;&nbsp;} }</code></pre> </figure> <!-- /wp:html --> <!-- wp:paragraph --> <p>The browser default <code>padding</code> for our block is “0,” so instead of adding a desktop media query and using <code>unset</code> or “0” for the <code>padding</code> value (which we would need with mobile-first), we can wrap the mobile <code>padding</code> in a closed media query (since it is now also an exception) so it won’t get picked up at wider breakpoints. At the desktop breakpoint, we won’t need to set any <code>padding</code> style, as we want the browser default value.</p> <!-- /wp:paragraph --> <!-- wp:heading --> <h2>Bundling versus separating the CSS</h2> <!-- /wp:heading --> <!-- wp:paragraph --> <p>Back in the day, keeping the number of requests to a minimum was very important due to the browser’s limit of concurrent requests (typically around six). As a consequence, the use of image sprites and CSS bundling was the norm, with all the CSS being downloaded in one go, as one stylesheet with highest priority.&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>With HTTP/2 and HTTP/3 now on the scene, the number of requests is no longer the big deal it used to be. This allows us to separate the CSS into multiple files by media query. The clear benefit of this is the browser can now request the CSS it currently needs with a higher priority than the CSS it doesn’t. This is more performant and can reduce the overall time <a href="https://web.dev/critical-rendering-path-render-blocking-css/">page rendering is blocked</a>.</p> <!-- /wp:paragraph --> <!-- wp:heading {"level":3} --> <h3>Which HTTP version are you using?</h3> <!-- /wp:heading --> <!-- wp:paragraph --> <p>To determine which version of HTTP you’re using, go to your website and open your browser’s dev tools. Next, select the <strong>Network</strong> tab and make sure the <strong>Protocol</strong> column is visible. If “h2” is listed under <strong>Protocol</strong>, it means HTTP/2 is being used.&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p><em>Note: to view the Protocol in your browser’s dev tools, go to the </em><strong><em>Network</em></strong><em> tab, reload your page, right-click any column header (e.g., </em><strong><em>Name</em></strong><em>), and check the </em><strong><em>Protocol</em></strong><em> column.</em></p> <!-- /wp:paragraph --> <!-- wp:image --> <figure class="wp-block-image"><img src="https://lh4.googleusercontent.com/O8lxNeIY3Hb0YDs2EP7QFhGdGsBXOG7mSTCdAJBd5xkm-6RwrpkS1BN63W7RurVCP3nOH9sNpAR9JNGvIGnUTzG0NYm4sUqI5bU2QPhXYEawmKfeUJ_6YwWAIid2ZDHEdRzaQ1LxzUNTGbGk5g" alt="Chrome dev tools, Network tab filtered by document, Protocol column"/><figcaption><em>Note: for a summarized comparison, see ImageKit’s “</em><a href="https://imagekit.io/blog/http2-vs-http1-performance/"><em>HTTP/2 vs. HTTP/1</em></a><em>.”</em></figcaption></figure> <!-- /wp:image --> <!-- wp:paragraph --> <p>Also, if your site is still using HTTP/1...WHY?!! What are you waiting for? There is <a href="https://caniuse.com/http2">excellent user support for HTTP/2</a>.</p> <!-- /wp:paragraph --> <!-- wp:heading --> <h2>Splitting the CSS</h2> <!-- /wp:heading --> <!-- wp:paragraph --> <p>Separating the CSS into individual files is a worthwhile task. Linking the separate CSS files using the relevant <code>media</code> attribute allows the browser to identify which files are needed immediately (because they’re render-blocking) and which can be deferred. Based on this, it allocates each file an appropriate priority.</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>In the following example of a website visited on a mobile breakpoint, we can see the mobile and default CSS are loaded with “Highest” priority, as they are currently needed to render the page. The remaining CSS files (print, tablet, and desktop) are still downloaded in case they’ll be needed later, but with “Lowest” priority.&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:image --> <figure class="wp-block-image"><img src="https://lh5.googleusercontent.com/RZOq-S7kbVsavDiFctQl6STFgGm6puwG8L22V6j6U1vUfo73Opq3Cspj2N94T2BU5lpYUD7Bb_4krFCXlePvBE8xXJVMFwbc_At8pzc-C5ug-6lrPViwMIIXgbKiJA-2fQ3beDoYfkCflCVgwg" alt="Chrome dev tools, Network tab filtered by css, Priority column"/></figure> <!-- /wp:image --> <!-- wp:paragraph --> <p>With<strong> bundled CSS</strong>, the browser will have to download the CSS file and parse it before rendering can start.<br><br>While, as noted, with the <strong>CSS separated into different files</strong> linked and marked up with the relevant <code>media</code> attribute, the browser can prioritize the files it currently needs. Using closed media query ranges allows the browser to do this at all widths, as opposed to classic mobile-first <code>min-width</code> queries, where the desktop browser would have to download all the CSS with Highest priority. We can’t assume that desktop users always have a fast connection. For instance, in many rural areas, internet connection speeds are still slow.&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>The media queries and number of separate CSS files will vary from project to project based on project requirements, but might look similar to the example below.</p> <!-- /wp:paragraph --> <!-- wp:html --> <figure class="wp-block-table"> <table><tbody> <tr> <td valign="top"> <p>Bundled CSS</p> <code>&lt;link href="site.css" rel="stylesheet"&gt;</code><br><br> <p>This single file contains all the CSS, including all media queries, and it will be downloaded with Highest priority.</p> </td> <td valign="top"> <p>Separated CSS</p> <code>&lt;link href="default.css" rel="stylesheet"&gt;&lt;link href="mobile.css" media="screen and (max-width: 767.98px)" rel="stylesheet"&gt;&lt;link href="tablet.css" media="screen and (min-width: 768px) and (max-width: 1083.98px)" rel="stylesheet"&gt;&lt;link href="desktop.css" media="screen and (min-width: 1084px)" rel="stylesheet"&gt;&lt;link href="print.css" media="print" rel="stylesheet"&gt;</code><br><br> <p>Separating the CSS and specifying a <code>media</code> attribute value on each <code>link</code> tag allows the browser to prioritize what it currently needs. Out of the five files listed above, two will be downloaded with Highest priority: the default file, and the file that matches the current media query. The others will be downloaded with Lowest priority.</p> </td> </tr> </tbody></table> </figure> <!-- /wp:html --> <!-- wp:paragraph --> <p>Depending on the project’s deployment strategy, a change to one file (<code>mobile.css</code>, for example) would only require the QA team to regression test on devices in that specific media query range. Compare that to the prospect of deploying the single bundled <code>site.css</code> file, an approach that would normally trigger a full regression test.</p> <!-- /wp:paragraph --> <!-- wp:heading --> <h2>Moving on</h2> <!-- /wp:heading --> <!-- wp:paragraph --> <p>The uptake of mobile-first CSS was a really important milestone in web development; it has helped front-end developers focus on mobile web applications, rather than developing sites on desktop and then attempting to retrofit them to work on other devices.</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>I don’t think anyone wants to return to that development model again, but it’s important we don’t lose sight of the issue it highlighted: that things can easily get convoluted and less efficient if we prioritize one particular device—any device—over others. For this reason, focusing on the CSS in its own right, always mindful of what is the default setting and what’s an exception, seems like the natural next step. I’ve started noticing small simplifications in my own CSS, as well as other developers’, and that testing and maintenance work is also a bit more simplified and productive.&nbsp;</p> <!-- /wp:paragraph --> <!-- wp:paragraph --> <p>In general, simplifying CSS rule creation whenever we can is ultimately a cleaner approach than going around in circles of overrides. But whichever methodology you choose, it needs to suit the project. Mobile-first may—or may not—turn out to be the best choice for what’s involved, but first you need to solidly understand the trade-offs you’re stepping into.</p> <!-- /wp:paragraph --> ]]>
			</description>
			<dc:subject>
			<![CDATA[ Code, CSS ]]>
			</dc:subject>
			<dc:date> 2022-06-09T02:13:10+00:00 </dc:date>
			</item>
			</channel>
			</rss>`,
    });

		const result = await fetchFeed("https://www.example.com/atom");
    expect(result).toEqual(
      expect.objectContaining({
        title: "A List Apart: The Full Feed",
        items: expect.arrayContaining([
          expect.objectContaining({
            link: "https://alistapart.com/article/personalization-pyramid/",
          }),
        ]),
      })
    );
	});
});
